datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-arm64-openssl-3.0.x"]
}

model User {
  id                    Int         @id @default(autoincrement())
  secureId              String      @unique @default(uuid())
  userIdInPaymentSystem String?     @unique
  name                  String
  email                 String      @unique
  password              String
  role                  Role        @relation(fields: [roleId], references: [id])
  roleId                Int
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now())
  Purchases             Purchase[]
}

model Role {
  id        Int      @id @default(autoincrement())
  secureId  String   @unique @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User[]
}

model Product {
  id          Int         @id @default(autoincrement())
  secureId    String      @unique @default(uuid())
  name        String
  amount      Int
  code        String
  description String
  quantity    String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  Purchases   Purchase[]
}

model Category {
  id        Int       @id @default(autoincrement())
  secureId  String    @unique @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Product   Product[]
}

model Purchase {
  id        Int      @id @default(autoincrement())
  secureId  String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
